# ---------------------------------------------------
# CI/CD Pipeline for Product API
# Uses GitVersion (6.3.x) for semantic versioning
# Deploys to Azure App Service (staging + prod) via ACR
# ---------------------------------------------------
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - 'feature/*'
      - 'fix/*'
      - 'chore/*'
      - 'refactor/*'
      - 'docs/*'
  pull_request:
    branches:
      - staging
      - main

jobs:
  # ---------------------------------------------------
  # Job 1: Build
  # ---------------------------------------------------
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --prune --progress

      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.3.x'

      - name: Determine Version
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v4.1.0
        with:
          configFilePath: GitVersion.yml

      - name: Display GitVersion outputs
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.gitversion.outputs.semVer }}

    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}

  # ---------------------------------------------------
  # Job 2: Tests
  # ---------------------------------------------------
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Run Tests
        run: dotnet test --no-build --configuration Release --verbosity normal

  # ---------------------------------------------------
  # Job 3: Deploy (to ACR + Azure App Service)
  # ---------------------------------------------------
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Login Azure (staging)
      - name: Azure Login (Staging)
        if: github.ref == 'refs/heads/staging'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      # Login Azure (prod)
      - name: Azure Login (Prod)
        if: github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to ACR
      - name: Docker Login to ACR
        run: az acr login --name productdemoacr

      # Build & Push Staging Image
      - name: Build & Push Staging Image
        if: github.ref == 'refs/heads/staging'
        run: |
          VERSION=${{ needs.build.outputs.semVer || 'staging' }}
          docker build -t productdemoacr.azurecr.io/product-api:$VERSION \
                       -t productdemoacr.azurecr.io/product-api:staging \
                       -f ProductDemo/Dockerfile .
          docker push productdemoacr.azurecr.io/product-api:$VERSION
          docker push productdemoacr.azurecr.io/product-api:staging

      - name: Deploy Staging WebApp
        if: github.ref == 'refs/heads/staging'
        uses: azure/webapps-deploy@v2
        with:
          app-name: productdemo-api-staging
          images: productdemoacr.azurecr.io/product-api:staging

      # Build & Push Prod Image
      - name: Build & Push Prod Image
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ needs.build.outputs.semVer || 'latest' }}
          docker build -t productdemoacr.azurecr.io/product-api:$VERSION \
                       -t productdemoacr.azurecr.io/product-api:latest \
                       -f ProductDemo/Dockerfile .
          docker push productdemoacr.azurecr.io/product-api:$VERSION
          docker push productdemoacr.azurecr.io/product-api:latest

      - name: Deploy Prod WebApp
        if: github.ref == 'refs/heads/main'
        uses: azure/webapps-deploy@v2
        with:
          app-name: productdemo-api
          images: productdemoacr.azurecr.io/product-api:latest

      # Tag release in Git (only for main)
      - name: Configure Git auth
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Create Git tag
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ needs.build.outputs.semVer || 'latest' }}
          git tag v$VERSION
          git push origin v$VERSION